
org: amarn19
app: etoken
service: etoken

plugins:
  - serverless-pseudo-parameters
  - serverless-mocha
  - serverless-offline

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name
  serverless-mocha-plugin:
    testTemplate: template/test-template.ejs
    functionTemplate: template/function-template.ejs
    
provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  stage: dev
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    ETOKEN_TABLE: ${self:service}-${opt:stage,self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.ETOKEN_TABLE}
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.ETOKEN_TABLE}/index/pk

functions:
  loginUser:
    handler: src/functions/loginUser.loginUser
    description: POST /user/login
    events:
      - http:
          method: post
          path: /v1/user/login
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            schema:
              application/json: ${file(src/schema/login_user_request.json)}
            
  createUser:
    handler: src/functions/createUser.createUser
    description: POST /user
    events:
      - http:
          method: post
          path: /v1/user
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            schema:
              application/json: ${file(src/schema/create_user_request.json)}

  updateUser:
    handler: src/functions/createUserProfile.userProfile
    description: PATCH /user
    events:
      - http:
          method: patch
          path: /v1/user
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            schema:
              application/json: ${file(src/schema/createUserProfile.json)}


resources:
  Resources:
    ETOKENTABLE:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.ETOKEN_TABLE}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: location
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: etoken-index
            KeySchema:
              - AttributeName: pk
                KeyType: HASH
              - AttributeName: location
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1